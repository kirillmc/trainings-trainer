syntax = "proto3";

package trainer_v1;

import "google/protobuf/empty.proto";
//import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";
//import "google/protobuf/timestamp.proto";
//import "validate/validate.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option go_package = "ithub.com/kirillmc/trainings-server/pkg/trainer_v1;trainer_v1";

option(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info:{
    title:"Training SERVER TRAINER API",
    version:"1.0.0",
    contact:{
      name:"Telegram",
      email:"https://t.me/McK03"
    };
  };

  host:"localhost:8080",
  schemes:HTTP,
  schemes:HTTPS,
  consumes:"application/json",
  produces:"application/json",
};

service TrainerV1{
  rpc GetClientsPrograms(GetClientsProgramsRequest) returns (GetClientsProgramsResponse){// Тренеру получить список программ c клиентамами
    option(google.api.http) = {
      get: "/api/clients-programs/{trainer_id}"
    };
  }

  rpc GetProgramsWithTrainers(GetProgramsWithTrainersRequest) returns (GetProgramsWithTrainersResponse){// Клиенту получить список программ с тренером
    option(google.api.http) = {
      get: "/api/trainers-programs/{client_id}"
    };
  }

  rpc GetClientsToAllow(GetClientsToAllowRequest) returns (GetClientsToAllowResponse){// Получить список клиентов, ожидающих работы
    option(google.api.http) = {
      get: "/api/clients-to-allow/{trainer_id}"
    };
  }

  rpc GetTrainersToAllow(GetTrainersToAllowRequest) returns (GetTrainersToAllowResponse){// Получить список тренеров, предлагающих услуги
    option(google.api.http) = {
      get: "/api/trainers-to-allow/{client_id}"
    };
  }

  rpc SetProgramToClient(SetProgramToClientRequest) returns (google.protobuf.Empty){// Добавить программу клиенту
    option(google.api.http) = {
      patch: "/api/set-program-to-client/{client_id}"
      body:"*"
    };
  }

  rpc BlockTrainer(BlockTrainerRequest) returns (google.protobuf.Empty){// ЗАблокировать тренера
    option(google.api.http) = {
      post: "/api/block-trainer/{trainer_id}"
      body:"*"
    };
  }

  rpc BlockClient(BlockClientRequest) returns (google.protobuf.Empty){// ЗАблокировать клиента
    option(google.api.http) = {
      post: "/api/block-client/{client_id}"
      body:"*"
    };
  }



}

enum Status{
  UNKNOWN = 0;
  LOCAl = 1;
  MODERING = 2;
  PUBLIC = 3;
}



message ClientsTrainingProgramInfo{
  string program_name = 1;
  int64 client = 2;
  string description = 3;
  Status status = 4;
}

message ClientsTrainingProgram{
  int64 id = 1;
  ClientsTrainingProgramInfo info = 2;
}

message TrainersTrainingProgramInfo{
  string program_name = 1;
  int64 trainer = 2;
  string description = 3;
  Status status = 4;
}

message TrainersTrainingProgram{
  int64 id = 1;
  ClientsTrainingProgramInfo info = 2;
}

message GetClientsProgramsRequest{
  int64 trainer_id = 1;
}

message GetClientsProgramsResponse{
  repeated ClientsTrainingProgram clients_programs = 1;
}

message GetProgramsWithTrainersRequest{
  int64 client_id = 1;
}

message GetProgramsWithTrainersResponse{
  repeated ClientsTrainingProgram trainers_programs = 1;
}

message GetClientsToAllowRequest{
  int64 trainer_id = 1;
}

message GetTrainersToAllowRequest{
  int64 client_id = 1;
}

message GetClientsToAllowResponse{
  repeated int64 client_id = 1;
}

message GetTrainersToAllowResponse{
  repeated int64 trainer_id = 1;
}

message SetProgramToClientRequest{
  int64 trainer_id = 1;
  int64 client_id = 2;
  int64 program_id = 3;
}

message BlockTrainerRequest{
  int64 trainer_id = 1;
  int64 client_id = 2;
  int64 program_id = 3;
}

message BlockClientRequest{
  int64 trainer_id = 1;
  int64 client_id = 2;
  int64 program_id = 3;
}
