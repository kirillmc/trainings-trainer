// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: training.proto

package training_v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainingV1Client is the client API for TrainingV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingV1Client interface {
	GetPublicTrainingPrograms(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPublicTrainingProgramsResponse, error)
	GetTrainingPrograms(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainingProgramsResponse, error)
	GetTrainingProgram(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainingProgramResponse, error)
	GetTrainDays(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainDaysResponse, error)
	GetTrainDay(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainDayResponse, error)
	GetExercises(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetExercisesResponse, error)
	GetExercise(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error)
	GetSets(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSetsResponse, error)
	GetSet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSetResponse, error)
	GetStatistic(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStatisticResponse, error)
	CreateTrainingProgram(ctx context.Context, in *CreateTrainingProgramRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateTrainDay(ctx context.Context, in *CreateTrainDayRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateStatistic(ctx context.Context, in *CreateStatisticRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	UpdateTrainingProgram(ctx context.Context, in *UpdateTrainingProgramRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateTrainDay(ctx context.Context, in *UpdateTrainDayRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateSet(ctx context.Context, in *UpdateSetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateStatistic(ctx context.Context, in *UpdateStatisticRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteTrainingProgram(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteTrainDay(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteExercise(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteSet(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteStatistic(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddProgramFromPublic(ctx context.Context, in *AddProgramFromPublicRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type trainingV1Client struct {
	cc grpc.ClientConnInterface
}

func NewTrainingV1Client(cc grpc.ClientConnInterface) TrainingV1Client {
	return &trainingV1Client{cc}
}

func (c *trainingV1Client) GetPublicTrainingPrograms(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetPublicTrainingProgramsResponse, error) {
	out := new(GetPublicTrainingProgramsResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetPublicTrainingPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetTrainingPrograms(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainingProgramsResponse, error) {
	out := new(GetTrainingProgramsResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetTrainingPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetTrainingProgram(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainingProgramResponse, error) {
	out := new(GetTrainingProgramResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetTrainingProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetTrainDays(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainDaysResponse, error) {
	out := new(GetTrainDaysResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetTrainDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetTrainDay(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTrainDayResponse, error) {
	out := new(GetTrainDayResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetTrainDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetExercises(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetExercisesResponse, error) {
	out := new(GetExercisesResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetExercises", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetExercise(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetExerciseResponse, error) {
	out := new(GetExerciseResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetSets(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSetsResponse, error) {
	out := new(GetSetsResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetSet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetSetResponse, error) {
	out := new(GetSetResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) GetStatistic(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetStatisticResponse, error) {
	out := new(GetStatisticResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/GetStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) CreateTrainingProgram(ctx context.Context, in *CreateTrainingProgramRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/CreateTrainingProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) CreateTrainDay(ctx context.Context, in *CreateTrainDayRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/CreateTrainDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) CreateExercise(ctx context.Context, in *CreateExerciseRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/CreateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/CreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) CreateStatistic(ctx context.Context, in *CreateStatisticRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/CreateStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) UpdateTrainingProgram(ctx context.Context, in *UpdateTrainingProgramRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/UpdateTrainingProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) UpdateTrainDay(ctx context.Context, in *UpdateTrainDayRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/UpdateTrainDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) UpdateExercise(ctx context.Context, in *UpdateExerciseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/UpdateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) UpdateSet(ctx context.Context, in *UpdateSetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/UpdateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) UpdateStatistic(ctx context.Context, in *UpdateStatisticRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/UpdateStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) DeleteTrainingProgram(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/DeleteTrainingProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) DeleteTrainDay(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/DeleteTrainDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) DeleteExercise(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/DeleteExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) DeleteSet(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/DeleteSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) DeleteStatistic(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/DeleteStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingV1Client) AddProgramFromPublic(ctx context.Context, in *AddProgramFromPublicRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/training_v1.TrainingV1/AddProgramFromPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingV1Server is the server API for TrainingV1 service.
// All implementations must embed UnimplementedTrainingV1Server
// for forward compatibility
type TrainingV1Server interface {
	GetPublicTrainingPrograms(context.Context, *empty.Empty) (*GetPublicTrainingProgramsResponse, error)
	GetTrainingPrograms(context.Context, *GetRequest) (*GetTrainingProgramsResponse, error)
	GetTrainingProgram(context.Context, *GetRequest) (*GetTrainingProgramResponse, error)
	GetTrainDays(context.Context, *GetRequest) (*GetTrainDaysResponse, error)
	GetTrainDay(context.Context, *GetRequest) (*GetTrainDayResponse, error)
	GetExercises(context.Context, *GetRequest) (*GetExercisesResponse, error)
	GetExercise(context.Context, *GetRequest) (*GetExerciseResponse, error)
	GetSets(context.Context, *GetRequest) (*GetSetsResponse, error)
	GetSet(context.Context, *GetRequest) (*GetSetResponse, error)
	GetStatistic(context.Context, *GetRequest) (*GetStatisticResponse, error)
	CreateTrainingProgram(context.Context, *CreateTrainingProgramRequest) (*CreateResponse, error)
	CreateTrainDay(context.Context, *CreateTrainDayRequest) (*CreateResponse, error)
	CreateExercise(context.Context, *CreateExerciseRequest) (*CreateResponse, error)
	CreateSet(context.Context, *CreateSetRequest) (*CreateResponse, error)
	CreateStatistic(context.Context, *CreateStatisticRequest) (*CreateResponse, error)
	UpdateTrainingProgram(context.Context, *UpdateTrainingProgramRequest) (*empty.Empty, error)
	UpdateTrainDay(context.Context, *UpdateTrainDayRequest) (*empty.Empty, error)
	UpdateExercise(context.Context, *UpdateExerciseRequest) (*empty.Empty, error)
	UpdateSet(context.Context, *UpdateSetRequest) (*empty.Empty, error)
	UpdateStatistic(context.Context, *UpdateStatisticRequest) (*empty.Empty, error)
	DeleteTrainingProgram(context.Context, *DeleteRequest) (*empty.Empty, error)
	DeleteTrainDay(context.Context, *DeleteRequest) (*empty.Empty, error)
	DeleteExercise(context.Context, *DeleteRequest) (*empty.Empty, error)
	DeleteSet(context.Context, *DeleteRequest) (*empty.Empty, error)
	DeleteStatistic(context.Context, *DeleteRequest) (*empty.Empty, error)
	AddProgramFromPublic(context.Context, *AddProgramFromPublicRequest) (*empty.Empty, error)
	mustEmbedUnimplementedTrainingV1Server()
}

// UnimplementedTrainingV1Server must be embedded to have forward compatible implementations.
type UnimplementedTrainingV1Server struct {
}

func (UnimplementedTrainingV1Server) GetPublicTrainingPrograms(context.Context, *empty.Empty) (*GetPublicTrainingProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicTrainingPrograms not implemented")
}
func (UnimplementedTrainingV1Server) GetTrainingPrograms(context.Context, *GetRequest) (*GetTrainingProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingPrograms not implemented")
}
func (UnimplementedTrainingV1Server) GetTrainingProgram(context.Context, *GetRequest) (*GetTrainingProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainingProgram not implemented")
}
func (UnimplementedTrainingV1Server) GetTrainDays(context.Context, *GetRequest) (*GetTrainDaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainDays not implemented")
}
func (UnimplementedTrainingV1Server) GetTrainDay(context.Context, *GetRequest) (*GetTrainDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainDay not implemented")
}
func (UnimplementedTrainingV1Server) GetExercises(context.Context, *GetRequest) (*GetExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercises not implemented")
}
func (UnimplementedTrainingV1Server) GetExercise(context.Context, *GetRequest) (*GetExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedTrainingV1Server) GetSets(context.Context, *GetRequest) (*GetSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSets not implemented")
}
func (UnimplementedTrainingV1Server) GetSet(context.Context, *GetRequest) (*GetSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSet not implemented")
}
func (UnimplementedTrainingV1Server) GetStatistic(context.Context, *GetRequest) (*GetStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistic not implemented")
}
func (UnimplementedTrainingV1Server) CreateTrainingProgram(context.Context, *CreateTrainingProgramRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainingProgram not implemented")
}
func (UnimplementedTrainingV1Server) CreateTrainDay(context.Context, *CreateTrainDayRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrainDay not implemented")
}
func (UnimplementedTrainingV1Server) CreateExercise(context.Context, *CreateExerciseRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExercise not implemented")
}
func (UnimplementedTrainingV1Server) CreateSet(context.Context, *CreateSetRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSet not implemented")
}
func (UnimplementedTrainingV1Server) CreateStatistic(context.Context, *CreateStatisticRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatistic not implemented")
}
func (UnimplementedTrainingV1Server) UpdateTrainingProgram(context.Context, *UpdateTrainingProgramRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainingProgram not implemented")
}
func (UnimplementedTrainingV1Server) UpdateTrainDay(context.Context, *UpdateTrainDayRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrainDay not implemented")
}
func (UnimplementedTrainingV1Server) UpdateExercise(context.Context, *UpdateExerciseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
}
func (UnimplementedTrainingV1Server) UpdateSet(context.Context, *UpdateSetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSet not implemented")
}
func (UnimplementedTrainingV1Server) UpdateStatistic(context.Context, *UpdateStatisticRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatistic not implemented")
}
func (UnimplementedTrainingV1Server) DeleteTrainingProgram(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrainingProgram not implemented")
}
func (UnimplementedTrainingV1Server) DeleteTrainDay(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrainDay not implemented")
}
func (UnimplementedTrainingV1Server) DeleteExercise(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedTrainingV1Server) DeleteSet(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSet not implemented")
}
func (UnimplementedTrainingV1Server) DeleteStatistic(context.Context, *DeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatistic not implemented")
}
func (UnimplementedTrainingV1Server) AddProgramFromPublic(context.Context, *AddProgramFromPublicRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProgramFromPublic not implemented")
}
func (UnimplementedTrainingV1Server) mustEmbedUnimplementedTrainingV1Server() {}

// UnsafeTrainingV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingV1Server will
// result in compilation errors.
type UnsafeTrainingV1Server interface {
	mustEmbedUnimplementedTrainingV1Server()
}

func RegisterTrainingV1Server(s grpc.ServiceRegistrar, srv TrainingV1Server) {
	s.RegisterService(&TrainingV1_ServiceDesc, srv)
}

func _TrainingV1_GetPublicTrainingPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetPublicTrainingPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetPublicTrainingPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetPublicTrainingPrograms(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetTrainingPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetTrainingPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetTrainingPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetTrainingPrograms(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetTrainingProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetTrainingProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetTrainingProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetTrainingProgram(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetTrainDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetTrainDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetTrainDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetTrainDays(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetTrainDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetTrainDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetTrainDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetTrainDay(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetExercises",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetExercises(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetExercise(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetSets(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetSet(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_GetStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).GetStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/GetStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).GetStatistic(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_CreateTrainingProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainingProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).CreateTrainingProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/CreateTrainingProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).CreateTrainingProgram(ctx, req.(*CreateTrainingProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_CreateTrainDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrainDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).CreateTrainDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/CreateTrainDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).CreateTrainDay(ctx, req.(*CreateTrainDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_CreateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).CreateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/CreateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).CreateExercise(ctx, req.(*CreateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_CreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).CreateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/CreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).CreateSet(ctx, req.(*CreateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_CreateStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).CreateStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/CreateStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).CreateStatistic(ctx, req.(*CreateStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_UpdateTrainingProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainingProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).UpdateTrainingProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/UpdateTrainingProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).UpdateTrainingProgram(ctx, req.(*UpdateTrainingProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_UpdateTrainDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrainDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).UpdateTrainDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/UpdateTrainDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).UpdateTrainDay(ctx, req.(*UpdateTrainDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_UpdateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/UpdateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).UpdateExercise(ctx, req.(*UpdateExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_UpdateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).UpdateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/UpdateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).UpdateSet(ctx, req.(*UpdateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_UpdateStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).UpdateStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/UpdateStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).UpdateStatistic(ctx, req.(*UpdateStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_DeleteTrainingProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).DeleteTrainingProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/DeleteTrainingProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).DeleteTrainingProgram(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_DeleteTrainDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).DeleteTrainDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/DeleteTrainDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).DeleteTrainDay(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/DeleteExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).DeleteExercise(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).DeleteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/DeleteSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).DeleteSet(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_DeleteStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).DeleteStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/DeleteStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).DeleteStatistic(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingV1_AddProgramFromPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProgramFromPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingV1Server).AddProgramFromPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/training_v1.TrainingV1/AddProgramFromPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingV1Server).AddProgramFromPublic(ctx, req.(*AddProgramFromPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainingV1_ServiceDesc is the grpc.ServiceDesc for TrainingV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainingV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "training_v1.TrainingV1",
	HandlerType: (*TrainingV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicTrainingPrograms",
			Handler:    _TrainingV1_GetPublicTrainingPrograms_Handler,
		},
		{
			MethodName: "GetTrainingPrograms",
			Handler:    _TrainingV1_GetTrainingPrograms_Handler,
		},
		{
			MethodName: "GetTrainingProgram",
			Handler:    _TrainingV1_GetTrainingProgram_Handler,
		},
		{
			MethodName: "GetTrainDays",
			Handler:    _TrainingV1_GetTrainDays_Handler,
		},
		{
			MethodName: "GetTrainDay",
			Handler:    _TrainingV1_GetTrainDay_Handler,
		},
		{
			MethodName: "GetExercises",
			Handler:    _TrainingV1_GetExercises_Handler,
		},
		{
			MethodName: "GetExercise",
			Handler:    _TrainingV1_GetExercise_Handler,
		},
		{
			MethodName: "GetSets",
			Handler:    _TrainingV1_GetSets_Handler,
		},
		{
			MethodName: "GetSet",
			Handler:    _TrainingV1_GetSet_Handler,
		},
		{
			MethodName: "GetStatistic",
			Handler:    _TrainingV1_GetStatistic_Handler,
		},
		{
			MethodName: "CreateTrainingProgram",
			Handler:    _TrainingV1_CreateTrainingProgram_Handler,
		},
		{
			MethodName: "CreateTrainDay",
			Handler:    _TrainingV1_CreateTrainDay_Handler,
		},
		{
			MethodName: "CreateExercise",
			Handler:    _TrainingV1_CreateExercise_Handler,
		},
		{
			MethodName: "CreateSet",
			Handler:    _TrainingV1_CreateSet_Handler,
		},
		{
			MethodName: "CreateStatistic",
			Handler:    _TrainingV1_CreateStatistic_Handler,
		},
		{
			MethodName: "UpdateTrainingProgram",
			Handler:    _TrainingV1_UpdateTrainingProgram_Handler,
		},
		{
			MethodName: "UpdateTrainDay",
			Handler:    _TrainingV1_UpdateTrainDay_Handler,
		},
		{
			MethodName: "UpdateExercise",
			Handler:    _TrainingV1_UpdateExercise_Handler,
		},
		{
			MethodName: "UpdateSet",
			Handler:    _TrainingV1_UpdateSet_Handler,
		},
		{
			MethodName: "UpdateStatistic",
			Handler:    _TrainingV1_UpdateStatistic_Handler,
		},
		{
			MethodName: "DeleteTrainingProgram",
			Handler:    _TrainingV1_DeleteTrainingProgram_Handler,
		},
		{
			MethodName: "DeleteTrainDay",
			Handler:    _TrainingV1_DeleteTrainDay_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _TrainingV1_DeleteExercise_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _TrainingV1_DeleteSet_Handler,
		},
		{
			MethodName: "DeleteStatistic",
			Handler:    _TrainingV1_DeleteStatistic_Handler,
		},
		{
			MethodName: "AddProgramFromPublic",
			Handler:    _TrainingV1_AddProgramFromPublic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "training.proto",
}
