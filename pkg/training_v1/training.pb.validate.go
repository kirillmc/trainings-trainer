// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: training.proto

package training_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TrainingProgramInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainingProgramInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingProgramInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingProgramInfoMultiError, or nil if none found.
func (m *TrainingProgramInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingProgramInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramName

	// no validation rules for UserId

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return TrainingProgramInfoMultiError(errors)
	}

	return nil
}

// TrainingProgramInfoMultiError is an error wrapping multiple validation
// errors returned by TrainingProgramInfo.ValidateAll() if the designated
// constraints aren't met.
type TrainingProgramInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingProgramInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingProgramInfoMultiError) AllErrors() []error { return m }

// TrainingProgramInfoValidationError is the validation error returned by
// TrainingProgramInfo.Validate if the designated constraints aren't met.
type TrainingProgramInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingProgramInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingProgramInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingProgramInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingProgramInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingProgramInfoValidationError) ErrorName() string {
	return "TrainingProgramInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingProgramInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingProgramInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingProgramInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingProgramInfoValidationError{}

// Validate checks the field values on PublicTrainingProgramInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicTrainingProgramInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicTrainingProgramInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicTrainingProgramInfoMultiError, or nil if none found.
func (m *PublicTrainingProgramInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicTrainingProgramInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramName

	// no validation rules for AuthorId

	// no validation rules for Description

	if len(errors) > 0 {
		return PublicTrainingProgramInfoMultiError(errors)
	}

	return nil
}

// PublicTrainingProgramInfoMultiError is an error wrapping multiple validation
// errors returned by PublicTrainingProgramInfo.ValidateAll() if the
// designated constraints aren't met.
type PublicTrainingProgramInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicTrainingProgramInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicTrainingProgramInfoMultiError) AllErrors() []error { return m }

// PublicTrainingProgramInfoValidationError is the validation error returned by
// PublicTrainingProgramInfo.Validate if the designated constraints aren't met.
type PublicTrainingProgramInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicTrainingProgramInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicTrainingProgramInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicTrainingProgramInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicTrainingProgramInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicTrainingProgramInfoValidationError) ErrorName() string {
	return "PublicTrainingProgramInfoValidationError"
}

// Error satisfies the builtin error interface
func (e PublicTrainingProgramInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicTrainingProgramInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicTrainingProgramInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicTrainingProgramInfoValidationError{}

// Validate checks the field values on TrainDayInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrainDayInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainDayInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainDayInfoMultiError, or
// nil if none found.
func (m *TrainDayInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainDayInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DayName

	// no validation rules for ProgramId

	// no validation rules for Description

	if len(errors) > 0 {
		return TrainDayInfoMultiError(errors)
	}

	return nil
}

// TrainDayInfoMultiError is an error wrapping multiple validation errors
// returned by TrainDayInfo.ValidateAll() if the designated constraints aren't met.
type TrainDayInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainDayInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainDayInfoMultiError) AllErrors() []error { return m }

// TrainDayInfoValidationError is the validation error returned by
// TrainDayInfo.Validate if the designated constraints aren't met.
type TrainDayInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainDayInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainDayInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainDayInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainDayInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainDayInfoValidationError) ErrorName() string { return "TrainDayInfoValidationError" }

// Error satisfies the builtin error interface
func (e TrainDayInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainDayInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainDayInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainDayInfoValidationError{}

// Validate checks the field values on ExerciseInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExerciseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExerciseInfoMultiError, or
// nil if none found.
func (m *ExerciseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseName

	// no validation rules for DayId

	// no validation rules for Pictures

	// no validation rules for Description

	if len(errors) > 0 {
		return ExerciseInfoMultiError(errors)
	}

	return nil
}

// ExerciseInfoMultiError is an error wrapping multiple validation errors
// returned by ExerciseInfo.ValidateAll() if the designated constraints aren't met.
type ExerciseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseInfoMultiError) AllErrors() []error { return m }

// ExerciseInfoValidationError is the validation error returned by
// ExerciseInfo.Validate if the designated constraints aren't met.
type ExerciseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseInfoValidationError) ErrorName() string { return "ExerciseInfoValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseInfoValidationError{}

// Validate checks the field values on SetInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetInfoMultiError, or nil if none found.
func (m *SetInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SetInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseId

	// no validation rules for Quantity

	// no validation rules for Weight

	if len(errors) > 0 {
		return SetInfoMultiError(errors)
	}

	return nil
}

// SetInfoMultiError is an error wrapping multiple validation errors returned
// by SetInfo.ValidateAll() if the designated constraints aren't met.
type SetInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetInfoMultiError) AllErrors() []error { return m }

// SetInfoValidationError is the validation error returned by SetInfo.Validate
// if the designated constraints aren't met.
type SetInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetInfoValidationError) ErrorName() string { return "SetInfoValidationError" }

// Error satisfies the builtin error interface
func (e SetInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetInfoValidationError{}

// Validate checks the field values on StatisticInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StatisticInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatisticInfoMultiError, or
// nil if none found.
func (m *StatisticInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SetId

	// no validation rules for ExerciseId

	// no validation rules for TrainDayId

	// no validation rules for ProgramId

	// no validation rules for Quantity

	// no validation rules for Weight

	if len(errors) > 0 {
		return StatisticInfoMultiError(errors)
	}

	return nil
}

// StatisticInfoMultiError is an error wrapping multiple validation errors
// returned by StatisticInfo.ValidateAll() if the designated constraints
// aren't met.
type StatisticInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticInfoMultiError) AllErrors() []error { return m }

// StatisticInfoValidationError is the validation error returned by
// StatisticInfo.Validate if the designated constraints aren't met.
type StatisticInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticInfoValidationError) ErrorName() string { return "StatisticInfoValidationError" }

// Error satisfies the builtin error interface
func (e StatisticInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticInfoValidationError{}

// Validate checks the field values on UpdateTrainingProgramInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTrainingProgramInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTrainingProgramInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTrainingProgramInfoMultiError, or nil if none found.
func (m *UpdateTrainingProgramInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTrainingProgramInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgramName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTrainingProgramInfoValidationError{
					field:  "ProgramName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTrainingProgramInfoValidationError{
					field:  "ProgramName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgramName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTrainingProgramInfoValidationError{
				field:  "ProgramName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTrainingProgramInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTrainingProgramInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTrainingProgramInfoValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateTrainingProgramInfoMultiError(errors)
	}

	return nil
}

// UpdateTrainingProgramInfoMultiError is an error wrapping multiple validation
// errors returned by UpdateTrainingProgramInfo.ValidateAll() if the
// designated constraints aren't met.
type UpdateTrainingProgramInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTrainingProgramInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTrainingProgramInfoMultiError) AllErrors() []error { return m }

// UpdateTrainingProgramInfoValidationError is the validation error returned by
// UpdateTrainingProgramInfo.Validate if the designated constraints aren't met.
type UpdateTrainingProgramInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTrainingProgramInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTrainingProgramInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTrainingProgramInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTrainingProgramInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTrainingProgramInfoValidationError) ErrorName() string {
	return "UpdateTrainingProgramInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTrainingProgramInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTrainingProgramInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTrainingProgramInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTrainingProgramInfoValidationError{}

// Validate checks the field values on UpdateTrainDayInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTrainDayInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTrainDayInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTrainDayInfoMultiError, or nil if none found.
func (m *UpdateTrainDayInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTrainDayInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDayName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTrainDayInfoValidationError{
					field:  "DayName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTrainDayInfoValidationError{
					field:  "DayName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDayName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTrainDayInfoValidationError{
				field:  "DayName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTrainDayInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTrainDayInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTrainDayInfoValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTrainDayInfoMultiError(errors)
	}

	return nil
}

// UpdateTrainDayInfoMultiError is an error wrapping multiple validation errors
// returned by UpdateTrainDayInfo.ValidateAll() if the designated constraints
// aren't met.
type UpdateTrainDayInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTrainDayInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTrainDayInfoMultiError) AllErrors() []error { return m }

// UpdateTrainDayInfoValidationError is the validation error returned by
// UpdateTrainDayInfo.Validate if the designated constraints aren't met.
type UpdateTrainDayInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTrainDayInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTrainDayInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTrainDayInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTrainDayInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTrainDayInfoValidationError) ErrorName() string {
	return "UpdateTrainDayInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTrainDayInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTrainDayInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTrainDayInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTrainDayInfoValidationError{}

// Validate checks the field values on UpdateExerciseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateExerciseInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExerciseInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExerciseInfoMultiError, or nil if none found.
func (m *UpdateExerciseInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExerciseInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExerciseName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseInfoValidationError{
					field:  "ExerciseName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseInfoValidationError{
					field:  "ExerciseName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExerciseName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseInfoValidationError{
				field:  "ExerciseName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPictures()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseInfoValidationError{
					field:  "Pictures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseInfoValidationError{
					field:  "Pictures",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPictures()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseInfoValidationError{
				field:  "Pictures",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseInfoValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseInfoValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExerciseInfoMultiError(errors)
	}

	return nil
}

// UpdateExerciseInfoMultiError is an error wrapping multiple validation errors
// returned by UpdateExerciseInfo.ValidateAll() if the designated constraints
// aren't met.
type UpdateExerciseInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExerciseInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExerciseInfoMultiError) AllErrors() []error { return m }

// UpdateExerciseInfoValidationError is the validation error returned by
// UpdateExerciseInfo.Validate if the designated constraints aren't met.
type UpdateExerciseInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExerciseInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExerciseInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExerciseInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExerciseInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExerciseInfoValidationError) ErrorName() string {
	return "UpdateExerciseInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExerciseInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExerciseInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExerciseInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExerciseInfoValidationError{}

// Validate checks the field values on UpdateSetInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSetInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSetInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSetInfoMultiError, or
// nil if none found.
func (m *UpdateSetInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSetInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSetInfoValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSetInfoValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSetInfoValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWeight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSetInfoValidationError{
					field:  "Weight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSetInfoValidationError{
					field:  "Weight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWeight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSetInfoValidationError{
				field:  "Weight",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSetInfoMultiError(errors)
	}

	return nil
}

// UpdateSetInfoMultiError is an error wrapping multiple validation errors
// returned by UpdateSetInfo.ValidateAll() if the designated constraints
// aren't met.
type UpdateSetInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSetInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSetInfoMultiError) AllErrors() []error { return m }

// UpdateSetInfoValidationError is the validation error returned by
// UpdateSetInfo.Validate if the designated constraints aren't met.
type UpdateSetInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSetInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSetInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSetInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSetInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSetInfoValidationError) ErrorName() string { return "UpdateSetInfoValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSetInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSetInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSetInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSetInfoValidationError{}

// Validate checks the field values on UpdateStatisticInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatisticInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatisticInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatisticInfoMultiError, or nil if none found.
func (m *UpdateStatisticInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatisticInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuantity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStatisticInfoValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStatisticInfoValidationError{
					field:  "Quantity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuantity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStatisticInfoValidationError{
				field:  "Quantity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWeight()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStatisticInfoValidationError{
					field:  "Weight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStatisticInfoValidationError{
					field:  "Weight",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWeight()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStatisticInfoValidationError{
				field:  "Weight",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStatisticInfoMultiError(errors)
	}

	return nil
}

// UpdateStatisticInfoMultiError is an error wrapping multiple validation
// errors returned by UpdateStatisticInfo.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatisticInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatisticInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatisticInfoMultiError) AllErrors() []error { return m }

// UpdateStatisticInfoValidationError is the validation error returned by
// UpdateStatisticInfo.Validate if the designated constraints aren't met.
type UpdateStatisticInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatisticInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatisticInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatisticInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatisticInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatisticInfoValidationError) ErrorName() string {
	return "UpdateStatisticInfoValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatisticInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatisticInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatisticInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatisticInfoValidationError{}

// Validate checks the field values on TrainingProgram with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TrainingProgram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingProgram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingProgramMultiError, or nil if none found.
func (m *TrainingProgram) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingProgram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainingProgramValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrainingProgramMultiError(errors)
	}

	return nil
}

// TrainingProgramMultiError is an error wrapping multiple validation errors
// returned by TrainingProgram.ValidateAll() if the designated constraints
// aren't met.
type TrainingProgramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingProgramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingProgramMultiError) AllErrors() []error { return m }

// TrainingProgramValidationError is the validation error returned by
// TrainingProgram.Validate if the designated constraints aren't met.
type TrainingProgramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingProgramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingProgramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingProgramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingProgramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingProgramValidationError) ErrorName() string { return "TrainingProgramValidationError" }

// Error satisfies the builtin error interface
func (e TrainingProgramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingProgram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingProgramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingProgramValidationError{}

// Validate checks the field values on PublicTrainingProgram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublicTrainingProgram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicTrainingProgram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicTrainingProgramMultiError, or nil if none found.
func (m *PublicTrainingProgram) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicTrainingProgram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublicTrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublicTrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublicTrainingProgramValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublicTrainingProgramMultiError(errors)
	}

	return nil
}

// PublicTrainingProgramMultiError is an error wrapping multiple validation
// errors returned by PublicTrainingProgram.ValidateAll() if the designated
// constraints aren't met.
type PublicTrainingProgramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicTrainingProgramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicTrainingProgramMultiError) AllErrors() []error { return m }

// PublicTrainingProgramValidationError is the validation error returned by
// PublicTrainingProgram.Validate if the designated constraints aren't met.
type PublicTrainingProgramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicTrainingProgramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicTrainingProgramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicTrainingProgramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicTrainingProgramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicTrainingProgramValidationError) ErrorName() string {
	return "PublicTrainingProgramValidationError"
}

// Error satisfies the builtin error interface
func (e PublicTrainingProgramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicTrainingProgram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicTrainingProgramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicTrainingProgramValidationError{}

// Validate checks the field values on TrainDay with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TrainDay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainDay with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TrainDayMultiError, or nil
// if none found.
func (m *TrainDay) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainDay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainDayValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainDayValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainDayValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrainDayMultiError(errors)
	}

	return nil
}

// TrainDayMultiError is an error wrapping multiple validation errors returned
// by TrainDay.ValidateAll() if the designated constraints aren't met.
type TrainDayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainDayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainDayMultiError) AllErrors() []error { return m }

// TrainDayValidationError is the validation error returned by
// TrainDay.Validate if the designated constraints aren't met.
type TrainDayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainDayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainDayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainDayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainDayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainDayValidationError) ErrorName() string { return "TrainDayValidationError" }

// Error satisfies the builtin error interface
func (e TrainDayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainDay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainDayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainDayValidationError{}

// Validate checks the field values on Exercise with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Exercise) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Exercise with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExerciseMultiError, or nil
// if none found.
func (m *Exercise) ValidateAll() error {
	return m.validate(true)
}

func (m *Exercise) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExerciseMultiError(errors)
	}

	return nil
}

// ExerciseMultiError is an error wrapping multiple validation errors returned
// by Exercise.ValidateAll() if the designated constraints aren't met.
type ExerciseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseMultiError) AllErrors() []error { return m }

// ExerciseValidationError is the validation error returned by
// Exercise.Validate if the designated constraints aren't met.
type ExerciseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseValidationError) ErrorName() string { return "ExerciseValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExercise.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseValidationError{}

// Validate checks the field values on Set with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Set) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Set with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetMultiError, or nil if none found.
func (m *Set) ValidateAll() error {
	return m.validate(true)
}

func (m *Set) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetMultiError(errors)
	}

	return nil
}

// SetMultiError is an error wrapping multiple validation errors returned by
// Set.ValidateAll() if the designated constraints aren't met.
type SetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMultiError) AllErrors() []error { return m }

// SetValidationError is the validation error returned by Set.Validate if the
// designated constraints aren't met.
type SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetValidationError) ErrorName() string { return "SetValidationError" }

// Error satisfies the builtin error interface
func (e SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetValidationError{}

// Validate checks the field values on Statistic with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Statistic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Statistic with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StatisticMultiError, or nil
// if none found.
func (m *Statistic) ValidateAll() error {
	return m.validate(true)
}

func (m *Statistic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatisticValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatisticValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatisticValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatisticValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatisticValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatisticValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatisticMultiError(errors)
	}

	return nil
}

// StatisticMultiError is an error wrapping multiple validation errors returned
// by Statistic.ValidateAll() if the designated constraints aren't met.
type StatisticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticMultiError) AllErrors() []error { return m }

// StatisticValidationError is the validation error returned by
// Statistic.Validate if the designated constraints aren't met.
type StatisticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticValidationError) ErrorName() string { return "StatisticValidationError" }

// Error satisfies the builtin error interface
func (e StatisticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatistic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticValidationError{}

// Validate checks the field values on CreateTrainingProgramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTrainingProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTrainingProgramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTrainingProgramRequestMultiError, or nil if none found.
func (m *CreateTrainingProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTrainingProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTrainingProgramRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTrainingProgramRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTrainingProgramRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTrainingProgramRequestMultiError(errors)
	}

	return nil
}

// CreateTrainingProgramRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTrainingProgramRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTrainingProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTrainingProgramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTrainingProgramRequestMultiError) AllErrors() []error { return m }

// CreateTrainingProgramRequestValidationError is the validation error returned
// by CreateTrainingProgramRequest.Validate if the designated constraints
// aren't met.
type CreateTrainingProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTrainingProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTrainingProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTrainingProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTrainingProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTrainingProgramRequestValidationError) ErrorName() string {
	return "CreateTrainingProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTrainingProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTrainingProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTrainingProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTrainingProgramRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateResponseMultiError,
// or nil if none found.
func (m *CreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateResponseMultiError(errors)
	}

	return nil
}

// CreateResponseMultiError is an error wrapping multiple validation errors
// returned by CreateResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateResponseMultiError) AllErrors() []error { return m }

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on CreateTrainDayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTrainDayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTrainDayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTrainDayRequestMultiError, or nil if none found.
func (m *CreateTrainDayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTrainDayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTrainDayRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTrainDayRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTrainDayRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTrainDayRequestMultiError(errors)
	}

	return nil
}

// CreateTrainDayRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTrainDayRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTrainDayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTrainDayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTrainDayRequestMultiError) AllErrors() []error { return m }

// CreateTrainDayRequestValidationError is the validation error returned by
// CreateTrainDayRequest.Validate if the designated constraints aren't met.
type CreateTrainDayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTrainDayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTrainDayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTrainDayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTrainDayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTrainDayRequestValidationError) ErrorName() string {
	return "CreateTrainDayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTrainDayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTrainDayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTrainDayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTrainDayRequestValidationError{}

// Validate checks the field values on CreateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExerciseRequestMultiError, or nil if none found.
func (m *CreateExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExerciseRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExerciseRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExerciseRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExerciseRequestMultiError(errors)
	}

	return nil
}

// CreateExerciseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExerciseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExerciseRequestMultiError) AllErrors() []error { return m }

// CreateExerciseRequestValidationError is the validation error returned by
// CreateExerciseRequest.Validate if the designated constraints aren't met.
type CreateExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExerciseRequestValidationError) ErrorName() string {
	return "CreateExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExerciseRequestValidationError{}

// Validate checks the field values on CreateSetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSetRequestMultiError, or nil if none found.
func (m *CreateSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSetRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSetRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSetRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSetRequestMultiError(errors)
	}

	return nil
}

// CreateSetRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSetRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSetRequestMultiError) AllErrors() []error { return m }

// CreateSetRequestValidationError is the validation error returned by
// CreateSetRequest.Validate if the designated constraints aren't met.
type CreateSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSetRequestValidationError) ErrorName() string { return "CreateSetRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSetRequestValidationError{}

// Validate checks the field values on CreateStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStatisticRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStatisticRequestMultiError, or nil if none found.
func (m *CreateStatisticRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStatisticRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStatisticRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStatisticRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStatisticRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStatisticRequestMultiError(errors)
	}

	return nil
}

// CreateStatisticRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStatisticRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStatisticRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStatisticRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStatisticRequestMultiError) AllErrors() []error { return m }

// CreateStatisticRequestValidationError is the validation error returned by
// CreateStatisticRequest.Validate if the designated constraints aren't met.
type CreateStatisticRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStatisticRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStatisticRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStatisticRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStatisticRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStatisticRequestValidationError) ErrorName() string {
	return "CreateStatisticRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStatisticRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStatisticRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStatisticRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStatisticRequestValidationError{}

// Validate checks the field values on UpdateTrainingProgramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTrainingProgramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTrainingProgramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTrainingProgramRequestMultiError, or nil if none found.
func (m *UpdateTrainingProgramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTrainingProgramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTrainingProgramRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTrainingProgramRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTrainingProgramRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTrainingProgramRequestMultiError(errors)
	}

	return nil
}

// UpdateTrainingProgramRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTrainingProgramRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTrainingProgramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTrainingProgramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTrainingProgramRequestMultiError) AllErrors() []error { return m }

// UpdateTrainingProgramRequestValidationError is the validation error returned
// by UpdateTrainingProgramRequest.Validate if the designated constraints
// aren't met.
type UpdateTrainingProgramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTrainingProgramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTrainingProgramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTrainingProgramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTrainingProgramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTrainingProgramRequestValidationError) ErrorName() string {
	return "UpdateTrainingProgramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTrainingProgramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTrainingProgramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTrainingProgramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTrainingProgramRequestValidationError{}

// Validate checks the field values on UpdateTrainDayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTrainDayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTrainDayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTrainDayRequestMultiError, or nil if none found.
func (m *UpdateTrainDayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTrainDayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTrainDayRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTrainDayRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTrainDayRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTrainDayRequestMultiError(errors)
	}

	return nil
}

// UpdateTrainDayRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTrainDayRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTrainDayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTrainDayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTrainDayRequestMultiError) AllErrors() []error { return m }

// UpdateTrainDayRequestValidationError is the validation error returned by
// UpdateTrainDayRequest.Validate if the designated constraints aren't met.
type UpdateTrainDayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTrainDayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTrainDayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTrainDayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTrainDayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTrainDayRequestValidationError) ErrorName() string {
	return "UpdateTrainDayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTrainDayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTrainDayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTrainDayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTrainDayRequestValidationError{}

// Validate checks the field values on UpdateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExerciseRequestMultiError, or nil if none found.
func (m *UpdateExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExerciseRequestMultiError(errors)
	}

	return nil
}

// UpdateExerciseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateExerciseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExerciseRequestMultiError) AllErrors() []error { return m }

// UpdateExerciseRequestValidationError is the validation error returned by
// UpdateExerciseRequest.Validate if the designated constraints aren't met.
type UpdateExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExerciseRequestValidationError) ErrorName() string {
	return "UpdateExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExerciseRequestValidationError{}

// Validate checks the field values on UpdateSetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSetRequestMultiError, or nil if none found.
func (m *UpdateSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSetRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSetRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSetRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSetRequestMultiError(errors)
	}

	return nil
}

// UpdateSetRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSetRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSetRequestMultiError) AllErrors() []error { return m }

// UpdateSetRequestValidationError is the validation error returned by
// UpdateSetRequest.Validate if the designated constraints aren't met.
type UpdateSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSetRequestValidationError) ErrorName() string { return "UpdateSetRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSetRequestValidationError{}

// Validate checks the field values on UpdateStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStatisticRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStatisticRequestMultiError, or nil if none found.
func (m *UpdateStatisticRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatisticRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStatisticRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStatisticRequestValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStatisticRequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStatisticRequestMultiError(errors)
	}

	return nil
}

// UpdateStatisticRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStatisticRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStatisticRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatisticRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatisticRequestMultiError) AllErrors() []error { return m }

// UpdateStatisticRequestValidationError is the validation error returned by
// UpdateStatisticRequest.Validate if the designated constraints aren't met.
type UpdateStatisticRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatisticRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatisticRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatisticRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatisticRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatisticRequestValidationError) ErrorName() string {
	return "UpdateStatisticRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatisticRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatisticRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatisticRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatisticRequestValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetTrainingProgramsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainingProgramsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainingProgramsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainingProgramsResponseMultiError, or nil if none found.
func (m *GetTrainingProgramsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainingProgramsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrainPrograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrainingProgramsResponseValidationError{
						field:  fmt.Sprintf("TrainPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrainingProgramsResponseValidationError{
						field:  fmt.Sprintf("TrainPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrainingProgramsResponseValidationError{
					field:  fmt.Sprintf("TrainPrograms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrainingProgramsResponseMultiError(errors)
	}

	return nil
}

// GetTrainingProgramsResponseMultiError is an error wrapping multiple
// validation errors returned by GetTrainingProgramsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTrainingProgramsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainingProgramsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainingProgramsResponseMultiError) AllErrors() []error { return m }

// GetTrainingProgramsResponseValidationError is the validation error returned
// by GetTrainingProgramsResponse.Validate if the designated constraints
// aren't met.
type GetTrainingProgramsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainingProgramsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainingProgramsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainingProgramsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainingProgramsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainingProgramsResponseValidationError) ErrorName() string {
	return "GetTrainingProgramsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainingProgramsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainingProgramsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainingProgramsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainingProgramsResponseValidationError{}

// Validate checks the field values on GetPublicTrainingProgramsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPublicTrainingProgramsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPublicTrainingProgramsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPublicTrainingProgramsResponseMultiError, or nil if none found.
func (m *GetPublicTrainingProgramsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPublicTrainingProgramsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrainPrograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPublicTrainingProgramsResponseValidationError{
						field:  fmt.Sprintf("TrainPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPublicTrainingProgramsResponseValidationError{
						field:  fmt.Sprintf("TrainPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPublicTrainingProgramsResponseValidationError{
					field:  fmt.Sprintf("TrainPrograms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPublicTrainingProgramsResponseMultiError(errors)
	}

	return nil
}

// GetPublicTrainingProgramsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPublicTrainingProgramsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPublicTrainingProgramsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPublicTrainingProgramsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPublicTrainingProgramsResponseMultiError) AllErrors() []error { return m }

// GetPublicTrainingProgramsResponseValidationError is the validation error
// returned by GetPublicTrainingProgramsResponse.Validate if the designated
// constraints aren't met.
type GetPublicTrainingProgramsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPublicTrainingProgramsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPublicTrainingProgramsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPublicTrainingProgramsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPublicTrainingProgramsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPublicTrainingProgramsResponseValidationError) ErrorName() string {
	return "GetPublicTrainingProgramsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPublicTrainingProgramsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPublicTrainingProgramsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPublicTrainingProgramsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPublicTrainingProgramsResponseValidationError{}

// Validate checks the field values on GetTrainingProgramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainingProgramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainingProgramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainingProgramResponseMultiError, or nil if none found.
func (m *GetTrainingProgramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainingProgramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrainProgram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainingProgramResponseValidationError{
					field:  "TrainProgram",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainingProgramResponseValidationError{
					field:  "TrainProgram",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrainProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainingProgramResponseValidationError{
				field:  "TrainProgram",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTrainingProgramResponseMultiError(errors)
	}

	return nil
}

// GetTrainingProgramResponseMultiError is an error wrapping multiple
// validation errors returned by GetTrainingProgramResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTrainingProgramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainingProgramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainingProgramResponseMultiError) AllErrors() []error { return m }

// GetTrainingProgramResponseValidationError is the validation error returned
// by GetTrainingProgramResponse.Validate if the designated constraints aren't met.
type GetTrainingProgramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainingProgramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainingProgramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainingProgramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainingProgramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainingProgramResponseValidationError) ErrorName() string {
	return "GetTrainingProgramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainingProgramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainingProgramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainingProgramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainingProgramResponseValidationError{}

// Validate checks the field values on GetTrainDaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainDaysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainDaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainDaysResponseMultiError, or nil if none found.
func (m *GetTrainDaysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainDaysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrainDays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTrainDaysResponseValidationError{
						field:  fmt.Sprintf("TrainDays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTrainDaysResponseValidationError{
						field:  fmt.Sprintf("TrainDays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTrainDaysResponseValidationError{
					field:  fmt.Sprintf("TrainDays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTrainDaysResponseMultiError(errors)
	}

	return nil
}

// GetTrainDaysResponseMultiError is an error wrapping multiple validation
// errors returned by GetTrainDaysResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTrainDaysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainDaysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainDaysResponseMultiError) AllErrors() []error { return m }

// GetTrainDaysResponseValidationError is the validation error returned by
// GetTrainDaysResponse.Validate if the designated constraints aren't met.
type GetTrainDaysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainDaysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainDaysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainDaysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainDaysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainDaysResponseValidationError) ErrorName() string {
	return "GetTrainDaysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainDaysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainDaysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainDaysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainDaysResponseValidationError{}

// Validate checks the field values on GetTrainDayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainDayResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainDayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainDayResponseMultiError, or nil if none found.
func (m *GetTrainDayResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainDayResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTrainDay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTrainDayResponseValidationError{
					field:  "TrainDay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTrainDayResponseValidationError{
					field:  "TrainDay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrainDay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTrainDayResponseValidationError{
				field:  "TrainDay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTrainDayResponseMultiError(errors)
	}

	return nil
}

// GetTrainDayResponseMultiError is an error wrapping multiple validation
// errors returned by GetTrainDayResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTrainDayResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainDayResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainDayResponseMultiError) AllErrors() []error { return m }

// GetTrainDayResponseValidationError is the validation error returned by
// GetTrainDayResponse.Validate if the designated constraints aren't met.
type GetTrainDayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainDayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainDayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainDayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainDayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainDayResponseValidationError) ErrorName() string {
	return "GetTrainDayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainDayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainDayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainDayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainDayResponseValidationError{}

// Validate checks the field values on GetExercisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExercisesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExercisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExercisesResponseMultiError, or nil if none found.
func (m *GetExercisesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExercisesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetExercises() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetExercisesResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetExercisesResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetExercisesResponseValidationError{
					field:  fmt.Sprintf("Exercises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetExercisesResponseMultiError(errors)
	}

	return nil
}

// GetExercisesResponseMultiError is an error wrapping multiple validation
// errors returned by GetExercisesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExercisesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExercisesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExercisesResponseMultiError) AllErrors() []error { return m }

// GetExercisesResponseValidationError is the validation error returned by
// GetExercisesResponse.Validate if the designated constraints aren't met.
type GetExercisesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExercisesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExercisesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExercisesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExercisesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExercisesResponseValidationError) ErrorName() string {
	return "GetExercisesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExercisesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExercisesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExercisesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExercisesResponseValidationError{}

// Validate checks the field values on GetExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExerciseResponseMultiError, or nil if none found.
func (m *GetExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExerciseResponseValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExerciseResponseValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExerciseResponseValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExerciseResponseMultiError(errors)
	}

	return nil
}

// GetExerciseResponseMultiError is an error wrapping multiple validation
// errors returned by GetExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseResponseMultiError) AllErrors() []error { return m }

// GetExerciseResponseValidationError is the validation error returned by
// GetExerciseResponse.Validate if the designated constraints aren't met.
type GetExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseResponseValidationError) ErrorName() string {
	return "GetExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseResponseValidationError{}

// Validate checks the field values on GetSetsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSetsResponseMultiError, or nil if none found.
func (m *GetSetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSetsResponseValidationError{
						field:  fmt.Sprintf("Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSetsResponseValidationError{
						field:  fmt.Sprintf("Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSetsResponseValidationError{
					field:  fmt.Sprintf("Sets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSetsResponseMultiError(errors)
	}

	return nil
}

// GetSetsResponseMultiError is an error wrapping multiple validation errors
// returned by GetSetsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSetsResponseMultiError) AllErrors() []error { return m }

// GetSetsResponseValidationError is the validation error returned by
// GetSetsResponse.Validate if the designated constraints aren't met.
type GetSetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSetsResponseValidationError) ErrorName() string { return "GetSetsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSetsResponseValidationError{}

// Validate checks the field values on GetSetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSetResponseMultiError,
// or nil if none found.
func (m *GetSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSetResponseValidationError{
					field:  "Set",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSetResponseValidationError{
					field:  "Set",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSetResponseValidationError{
				field:  "Set",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSetResponseMultiError(errors)
	}

	return nil
}

// GetSetResponseMultiError is an error wrapping multiple validation errors
// returned by GetSetResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSetResponseMultiError) AllErrors() []error { return m }

// GetSetResponseValidationError is the validation error returned by
// GetSetResponse.Validate if the designated constraints aren't met.
type GetSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSetResponseValidationError) ErrorName() string { return "GetSetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSetResponseValidationError{}

// Validate checks the field values on GetStatisticResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStatisticResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatisticResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatisticResponseMultiError, or nil if none found.
func (m *GetStatisticResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatisticResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatistic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatisticResponseValidationError{
					field:  "Statistic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatisticResponseValidationError{
					field:  "Statistic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatistic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatisticResponseValidationError{
				field:  "Statistic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStatisticResponseMultiError(errors)
	}

	return nil
}

// GetStatisticResponseMultiError is an error wrapping multiple validation
// errors returned by GetStatisticResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStatisticResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatisticResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatisticResponseMultiError) AllErrors() []error { return m }

// GetStatisticResponseValidationError is the validation error returned by
// GetStatisticResponse.Validate if the designated constraints aren't met.
type GetStatisticResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatisticResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatisticResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatisticResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatisticResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatisticResponseValidationError) ErrorName() string {
	return "GetStatisticResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatisticResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatisticResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatisticResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatisticResponseValidationError{}

// Validate checks the field values on AddProgramFromPublicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProgramFromPublicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProgramFromPublicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProgramFromPublicRequestMultiError, or nil if none found.
func (m *AddProgramFromPublicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProgramFromPublicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramId

	// no validation rules for UserId

	if len(errors) > 0 {
		return AddProgramFromPublicRequestMultiError(errors)
	}

	return nil
}

// AddProgramFromPublicRequestMultiError is an error wrapping multiple
// validation errors returned by AddProgramFromPublicRequest.ValidateAll() if
// the designated constraints aren't met.
type AddProgramFromPublicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProgramFromPublicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProgramFromPublicRequestMultiError) AllErrors() []error { return m }

// AddProgramFromPublicRequestValidationError is the validation error returned
// by AddProgramFromPublicRequest.Validate if the designated constraints
// aren't met.
type AddProgramFromPublicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProgramFromPublicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProgramFromPublicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProgramFromPublicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProgramFromPublicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProgramFromPublicRequestValidationError) ErrorName() string {
	return "AddProgramFromPublicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProgramFromPublicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProgramFromPublicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProgramFromPublicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProgramFromPublicRequestValidationError{}
