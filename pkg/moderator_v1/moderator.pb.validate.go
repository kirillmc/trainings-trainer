// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: moderator.proto

package moderator_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TrainingProgramToModerationInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainingProgramToModerationInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingProgramToModerationInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TrainingProgramToModerationInfoMultiError, or nil if none found.
func (m *TrainingProgramToModerationInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingProgramToModerationInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramName

	// no validation rules for AuthorId

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return TrainingProgramToModerationInfoMultiError(errors)
	}

	return nil
}

// TrainingProgramToModerationInfoMultiError is an error wrapping multiple
// validation errors returned by TrainingProgramToModerationInfo.ValidateAll()
// if the designated constraints aren't met.
type TrainingProgramToModerationInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingProgramToModerationInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingProgramToModerationInfoMultiError) AllErrors() []error { return m }

// TrainingProgramToModerationInfoValidationError is the validation error
// returned by TrainingProgramToModerationInfo.Validate if the designated
// constraints aren't met.
type TrainingProgramToModerationInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingProgramToModerationInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingProgramToModerationInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingProgramToModerationInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingProgramToModerationInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingProgramToModerationInfoValidationError) ErrorName() string {
	return "TrainingProgramToModerationInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingProgramToModerationInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingProgramToModerationInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingProgramToModerationInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingProgramToModerationInfoValidationError{}

// Validate checks the field values on TrainingProgramToModeration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainingProgramToModeration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainingProgramToModeration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainingProgramToModerationMultiError, or nil if none found.
func (m *TrainingProgramToModeration) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainingProgramToModeration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainingProgramToModerationValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainingProgramToModerationValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainingProgramToModerationValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrainingProgramToModerationMultiError(errors)
	}

	return nil
}

// TrainingProgramToModerationMultiError is an error wrapping multiple
// validation errors returned by TrainingProgramToModeration.ValidateAll() if
// the designated constraints aren't met.
type TrainingProgramToModerationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainingProgramToModerationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainingProgramToModerationMultiError) AllErrors() []error { return m }

// TrainingProgramToModerationValidationError is the validation error returned
// by TrainingProgramToModeration.Validate if the designated constraints
// aren't met.
type TrainingProgramToModerationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainingProgramToModerationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainingProgramToModerationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainingProgramToModerationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainingProgramToModerationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainingProgramToModerationValidationError) ErrorName() string {
	return "TrainingProgramToModerationValidationError"
}

// Error satisfies the builtin error interface
func (e TrainingProgramToModerationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainingProgramToModeration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainingProgramToModerationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainingProgramToModerationValidationError{}

// Validate checks the field values on GetProgramsToModerationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramsToModerationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramsToModerationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProgramsToModerationResponseMultiError, or nil if none found.
func (m *GetProgramsToModerationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramsToModerationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgramsToModeration() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProgramsToModerationResponseValidationError{
						field:  fmt.Sprintf("ProgramsToModeration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProgramsToModerationResponseValidationError{
						field:  fmt.Sprintf("ProgramsToModeration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProgramsToModerationResponseValidationError{
					field:  fmt.Sprintf("ProgramsToModeration[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProgramsToModerationResponseMultiError(errors)
	}

	return nil
}

// GetProgramsToModerationResponseMultiError is an error wrapping multiple
// validation errors returned by GetProgramsToModerationResponse.ValidateAll()
// if the designated constraints aren't met.
type GetProgramsToModerationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramsToModerationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramsToModerationResponseMultiError) AllErrors() []error { return m }

// GetProgramsToModerationResponseValidationError is the validation error
// returned by GetProgramsToModerationResponse.Validate if the designated
// constraints aren't met.
type GetProgramsToModerationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramsToModerationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramsToModerationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramsToModerationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramsToModerationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramsToModerationResponseValidationError) ErrorName() string {
	return "GetProgramsToModerationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramsToModerationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramsToModerationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramsToModerationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramsToModerationResponseValidationError{}

// Validate checks the field values on EnableProgramsPublicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableProgramsPublicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableProgramsPublicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableProgramsPublicRequestMultiError, or nil if none found.
func (m *EnableProgramsPublicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableProgramsPublicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramId

	if len(errors) > 0 {
		return EnableProgramsPublicRequestMultiError(errors)
	}

	return nil
}

// EnableProgramsPublicRequestMultiError is an error wrapping multiple
// validation errors returned by EnableProgramsPublicRequest.ValidateAll() if
// the designated constraints aren't met.
type EnableProgramsPublicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableProgramsPublicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableProgramsPublicRequestMultiError) AllErrors() []error { return m }

// EnableProgramsPublicRequestValidationError is the validation error returned
// by EnableProgramsPublicRequest.Validate if the designated constraints
// aren't met.
type EnableProgramsPublicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableProgramsPublicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableProgramsPublicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableProgramsPublicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableProgramsPublicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableProgramsPublicRequestValidationError) ErrorName() string {
	return "EnableProgramsPublicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableProgramsPublicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableProgramsPublicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableProgramsPublicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableProgramsPublicRequestValidationError{}

// Validate checks the field values on DisableProgramsPublicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableProgramsPublicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableProgramsPublicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableProgramsPublicRequestMultiError, or nil if none found.
func (m *DisableProgramsPublicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableProgramsPublicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramId

	if len(errors) > 0 {
		return DisableProgramsPublicRequestMultiError(errors)
	}

	return nil
}

// DisableProgramsPublicRequestMultiError is an error wrapping multiple
// validation errors returned by DisableProgramsPublicRequest.ValidateAll() if
// the designated constraints aren't met.
type DisableProgramsPublicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableProgramsPublicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableProgramsPublicRequestMultiError) AllErrors() []error { return m }

// DisableProgramsPublicRequestValidationError is the validation error returned
// by DisableProgramsPublicRequest.Validate if the designated constraints
// aren't met.
type DisableProgramsPublicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableProgramsPublicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableProgramsPublicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableProgramsPublicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableProgramsPublicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableProgramsPublicRequestValidationError) ErrorName() string {
	return "DisableProgramsPublicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableProgramsPublicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableProgramsPublicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableProgramsPublicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableProgramsPublicRequestValidationError{}

// Validate checks the field values on SendProgramToModerationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendProgramToModerationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendProgramToModerationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendProgramToModerationRequestMultiError, or nil if none found.
func (m *SendProgramToModerationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendProgramToModerationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramId

	// no validation rules for UserId

	if len(errors) > 0 {
		return SendProgramToModerationRequestMultiError(errors)
	}

	return nil
}

// SendProgramToModerationRequestMultiError is an error wrapping multiple
// validation errors returned by SendProgramToModerationRequest.ValidateAll()
// if the designated constraints aren't met.
type SendProgramToModerationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendProgramToModerationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendProgramToModerationRequestMultiError) AllErrors() []error { return m }

// SendProgramToModerationRequestValidationError is the validation error
// returned by SendProgramToModerationRequest.Validate if the designated
// constraints aren't met.
type SendProgramToModerationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendProgramToModerationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendProgramToModerationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendProgramToModerationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendProgramToModerationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendProgramToModerationRequestValidationError) ErrorName() string {
	return "SendProgramToModerationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendProgramToModerationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendProgramToModerationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendProgramToModerationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendProgramToModerationRequestValidationError{}
