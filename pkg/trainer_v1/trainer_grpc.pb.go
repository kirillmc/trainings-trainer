// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: trainer.proto

package trainer_v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainerV1Client is the client API for TrainerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerV1Client interface {
	GetClientsPrograms(ctx context.Context, in *GetClientsProgramsRequest, opts ...grpc.CallOption) (*GetClientsProgramsResponse, error)
	GetProgramsWithTrainers(ctx context.Context, in *GetProgramsWithTrainersRequest, opts ...grpc.CallOption) (*GetProgramsWithTrainersResponse, error)
	GetClientsToAllow(ctx context.Context, in *GetClientsToAllowRequest, opts ...grpc.CallOption) (*GetClientsToAllowResponse, error)
	GetTrainersToAllow(ctx context.Context, in *GetTrainersToAllowRequest, opts ...grpc.CallOption) (*GetTrainersToAllowResponse, error)
	SetProgramToClient(ctx context.Context, in *SetProgramToClientRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BlockTrainer(ctx context.Context, in *BlockTrainerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BlockClient(ctx context.Context, in *BlockClientRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type trainerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewTrainerV1Client(cc grpc.ClientConnInterface) TrainerV1Client {
	return &trainerV1Client{cc}
}

func (c *trainerV1Client) GetClientsPrograms(ctx context.Context, in *GetClientsProgramsRequest, opts ...grpc.CallOption) (*GetClientsProgramsResponse, error) {
	out := new(GetClientsProgramsResponse)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/GetClientsPrograms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerV1Client) GetProgramsWithTrainers(ctx context.Context, in *GetProgramsWithTrainersRequest, opts ...grpc.CallOption) (*GetProgramsWithTrainersResponse, error) {
	out := new(GetProgramsWithTrainersResponse)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/GetProgramsWithTrainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerV1Client) GetClientsToAllow(ctx context.Context, in *GetClientsToAllowRequest, opts ...grpc.CallOption) (*GetClientsToAllowResponse, error) {
	out := new(GetClientsToAllowResponse)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/GetClientsToAllow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerV1Client) GetTrainersToAllow(ctx context.Context, in *GetTrainersToAllowRequest, opts ...grpc.CallOption) (*GetTrainersToAllowResponse, error) {
	out := new(GetTrainersToAllowResponse)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/GetTrainersToAllow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerV1Client) SetProgramToClient(ctx context.Context, in *SetProgramToClientRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/SetProgramToClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerV1Client) BlockTrainer(ctx context.Context, in *BlockTrainerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/BlockTrainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainerV1Client) BlockClient(ctx context.Context, in *BlockClientRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/trainer_v1.TrainerV1/BlockClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerV1Server is the server API for TrainerV1 service.
// All implementations must embed UnimplementedTrainerV1Server
// for forward compatibility
type TrainerV1Server interface {
	GetClientsPrograms(context.Context, *GetClientsProgramsRequest) (*GetClientsProgramsResponse, error)
	GetProgramsWithTrainers(context.Context, *GetProgramsWithTrainersRequest) (*GetProgramsWithTrainersResponse, error)
	GetClientsToAllow(context.Context, *GetClientsToAllowRequest) (*GetClientsToAllowResponse, error)
	GetTrainersToAllow(context.Context, *GetTrainersToAllowRequest) (*GetTrainersToAllowResponse, error)
	SetProgramToClient(context.Context, *SetProgramToClientRequest) (*empty.Empty, error)
	BlockTrainer(context.Context, *BlockTrainerRequest) (*empty.Empty, error)
	BlockClient(context.Context, *BlockClientRequest) (*empty.Empty, error)
	mustEmbedUnimplementedTrainerV1Server()
}

// UnimplementedTrainerV1Server must be embedded to have forward compatible implementations.
type UnimplementedTrainerV1Server struct {
}

func (UnimplementedTrainerV1Server) GetClientsPrograms(context.Context, *GetClientsProgramsRequest) (*GetClientsProgramsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsPrograms not implemented")
}
func (UnimplementedTrainerV1Server) GetProgramsWithTrainers(context.Context, *GetProgramsWithTrainersRequest) (*GetProgramsWithTrainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramsWithTrainers not implemented")
}
func (UnimplementedTrainerV1Server) GetClientsToAllow(context.Context, *GetClientsToAllowRequest) (*GetClientsToAllowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsToAllow not implemented")
}
func (UnimplementedTrainerV1Server) GetTrainersToAllow(context.Context, *GetTrainersToAllowRequest) (*GetTrainersToAllowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainersToAllow not implemented")
}
func (UnimplementedTrainerV1Server) SetProgramToClient(context.Context, *SetProgramToClientRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProgramToClient not implemented")
}
func (UnimplementedTrainerV1Server) BlockTrainer(context.Context, *BlockTrainerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockTrainer not implemented")
}
func (UnimplementedTrainerV1Server) BlockClient(context.Context, *BlockClientRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockClient not implemented")
}
func (UnimplementedTrainerV1Server) mustEmbedUnimplementedTrainerV1Server() {}

// UnsafeTrainerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerV1Server will
// result in compilation errors.
type UnsafeTrainerV1Server interface {
	mustEmbedUnimplementedTrainerV1Server()
}

func RegisterTrainerV1Server(s grpc.ServiceRegistrar, srv TrainerV1Server) {
	s.RegisterService(&TrainerV1_ServiceDesc, srv)
}

func _TrainerV1_GetClientsPrograms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsProgramsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).GetClientsPrograms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/GetClientsPrograms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).GetClientsPrograms(ctx, req.(*GetClientsProgramsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerV1_GetProgramsWithTrainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramsWithTrainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).GetProgramsWithTrainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/GetProgramsWithTrainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).GetProgramsWithTrainers(ctx, req.(*GetProgramsWithTrainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerV1_GetClientsToAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsToAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).GetClientsToAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/GetClientsToAllow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).GetClientsToAllow(ctx, req.(*GetClientsToAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerV1_GetTrainersToAllow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainersToAllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).GetTrainersToAllow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/GetTrainersToAllow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).GetTrainersToAllow(ctx, req.(*GetTrainersToAllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerV1_SetProgramToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProgramToClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).SetProgramToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/SetProgramToClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).SetProgramToClient(ctx, req.(*SetProgramToClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerV1_BlockTrainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTrainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).BlockTrainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/BlockTrainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).BlockTrainer(ctx, req.(*BlockTrainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainerV1_BlockClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerV1Server).BlockClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trainer_v1.TrainerV1/BlockClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerV1Server).BlockClient(ctx, req.(*BlockClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainerV1_ServiceDesc is the grpc.ServiceDesc for TrainerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainer_v1.TrainerV1",
	HandlerType: (*TrainerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientsPrograms",
			Handler:    _TrainerV1_GetClientsPrograms_Handler,
		},
		{
			MethodName: "GetProgramsWithTrainers",
			Handler:    _TrainerV1_GetProgramsWithTrainers_Handler,
		},
		{
			MethodName: "GetClientsToAllow",
			Handler:    _TrainerV1_GetClientsToAllow_Handler,
		},
		{
			MethodName: "GetTrainersToAllow",
			Handler:    _TrainerV1_GetTrainersToAllow_Handler,
		},
		{
			MethodName: "SetProgramToClient",
			Handler:    _TrainerV1_SetProgramToClient_Handler,
		},
		{
			MethodName: "BlockTrainer",
			Handler:    _TrainerV1_BlockTrainer_Handler,
		},
		{
			MethodName: "BlockClient",
			Handler:    _TrainerV1_BlockClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trainer.proto",
}
