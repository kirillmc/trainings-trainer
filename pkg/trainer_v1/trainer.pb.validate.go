// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: trainer.proto

package trainer_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClientsTrainingProgramInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientsTrainingProgramInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientsTrainingProgramInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientsTrainingProgramInfoMultiError, or nil if none found.
func (m *ClientsTrainingProgramInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientsTrainingProgramInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramName

	// no validation rules for Client

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return ClientsTrainingProgramInfoMultiError(errors)
	}

	return nil
}

// ClientsTrainingProgramInfoMultiError is an error wrapping multiple
// validation errors returned by ClientsTrainingProgramInfo.ValidateAll() if
// the designated constraints aren't met.
type ClientsTrainingProgramInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientsTrainingProgramInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientsTrainingProgramInfoMultiError) AllErrors() []error { return m }

// ClientsTrainingProgramInfoValidationError is the validation error returned
// by ClientsTrainingProgramInfo.Validate if the designated constraints aren't met.
type ClientsTrainingProgramInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientsTrainingProgramInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientsTrainingProgramInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientsTrainingProgramInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientsTrainingProgramInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientsTrainingProgramInfoValidationError) ErrorName() string {
	return "ClientsTrainingProgramInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ClientsTrainingProgramInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientsTrainingProgramInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientsTrainingProgramInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientsTrainingProgramInfoValidationError{}

// Validate checks the field values on ClientsTrainingProgram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientsTrainingProgram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientsTrainingProgram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientsTrainingProgramMultiError, or nil if none found.
func (m *ClientsTrainingProgram) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientsTrainingProgram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientsTrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientsTrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientsTrainingProgramValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClientsTrainingProgramMultiError(errors)
	}

	return nil
}

// ClientsTrainingProgramMultiError is an error wrapping multiple validation
// errors returned by ClientsTrainingProgram.ValidateAll() if the designated
// constraints aren't met.
type ClientsTrainingProgramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientsTrainingProgramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientsTrainingProgramMultiError) AllErrors() []error { return m }

// ClientsTrainingProgramValidationError is the validation error returned by
// ClientsTrainingProgram.Validate if the designated constraints aren't met.
type ClientsTrainingProgramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientsTrainingProgramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientsTrainingProgramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientsTrainingProgramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientsTrainingProgramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientsTrainingProgramValidationError) ErrorName() string {
	return "ClientsTrainingProgramValidationError"
}

// Error satisfies the builtin error interface
func (e ClientsTrainingProgramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientsTrainingProgram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientsTrainingProgramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientsTrainingProgramValidationError{}

// Validate checks the field values on TrainersTrainingProgramInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainersTrainingProgramInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainersTrainingProgramInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainersTrainingProgramInfoMultiError, or nil if none found.
func (m *TrainersTrainingProgramInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainersTrainingProgramInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramName

	// no validation rules for Trainer

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return TrainersTrainingProgramInfoMultiError(errors)
	}

	return nil
}

// TrainersTrainingProgramInfoMultiError is an error wrapping multiple
// validation errors returned by TrainersTrainingProgramInfo.ValidateAll() if
// the designated constraints aren't met.
type TrainersTrainingProgramInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainersTrainingProgramInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainersTrainingProgramInfoMultiError) AllErrors() []error { return m }

// TrainersTrainingProgramInfoValidationError is the validation error returned
// by TrainersTrainingProgramInfo.Validate if the designated constraints
// aren't met.
type TrainersTrainingProgramInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainersTrainingProgramInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainersTrainingProgramInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainersTrainingProgramInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainersTrainingProgramInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainersTrainingProgramInfoValidationError) ErrorName() string {
	return "TrainersTrainingProgramInfoValidationError"
}

// Error satisfies the builtin error interface
func (e TrainersTrainingProgramInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainersTrainingProgramInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainersTrainingProgramInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainersTrainingProgramInfoValidationError{}

// Validate checks the field values on TrainersTrainingProgram with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrainersTrainingProgram) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrainersTrainingProgram with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TrainersTrainingProgramMultiError, or nil if none found.
func (m *TrainersTrainingProgram) ValidateAll() error {
	return m.validate(true)
}

func (m *TrainersTrainingProgram) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TrainersTrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TrainersTrainingProgramValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrainersTrainingProgramValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TrainersTrainingProgramMultiError(errors)
	}

	return nil
}

// TrainersTrainingProgramMultiError is an error wrapping multiple validation
// errors returned by TrainersTrainingProgram.ValidateAll() if the designated
// constraints aren't met.
type TrainersTrainingProgramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrainersTrainingProgramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrainersTrainingProgramMultiError) AllErrors() []error { return m }

// TrainersTrainingProgramValidationError is the validation error returned by
// TrainersTrainingProgram.Validate if the designated constraints aren't met.
type TrainersTrainingProgramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrainersTrainingProgramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrainersTrainingProgramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrainersTrainingProgramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrainersTrainingProgramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrainersTrainingProgramValidationError) ErrorName() string {
	return "TrainersTrainingProgramValidationError"
}

// Error satisfies the builtin error interface
func (e TrainersTrainingProgramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrainersTrainingProgram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrainersTrainingProgramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrainersTrainingProgramValidationError{}

// Validate checks the field values on GetClientsProgramsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientsProgramsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientsProgramsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientsProgramsRequestMultiError, or nil if none found.
func (m *GetClientsProgramsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientsProgramsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainerId

	if len(errors) > 0 {
		return GetClientsProgramsRequestMultiError(errors)
	}

	return nil
}

// GetClientsProgramsRequestMultiError is an error wrapping multiple validation
// errors returned by GetClientsProgramsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetClientsProgramsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientsProgramsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientsProgramsRequestMultiError) AllErrors() []error { return m }

// GetClientsProgramsRequestValidationError is the validation error returned by
// GetClientsProgramsRequest.Validate if the designated constraints aren't met.
type GetClientsProgramsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientsProgramsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientsProgramsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientsProgramsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientsProgramsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientsProgramsRequestValidationError) ErrorName() string {
	return "GetClientsProgramsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientsProgramsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientsProgramsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientsProgramsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientsProgramsRequestValidationError{}

// Validate checks the field values on GetClientsProgramsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientsProgramsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientsProgramsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientsProgramsResponseMultiError, or nil if none found.
func (m *GetClientsProgramsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientsProgramsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClientsPrograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClientsProgramsResponseValidationError{
						field:  fmt.Sprintf("ClientsPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClientsProgramsResponseValidationError{
						field:  fmt.Sprintf("ClientsPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClientsProgramsResponseValidationError{
					field:  fmt.Sprintf("ClientsPrograms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClientsProgramsResponseMultiError(errors)
	}

	return nil
}

// GetClientsProgramsResponseMultiError is an error wrapping multiple
// validation errors returned by GetClientsProgramsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetClientsProgramsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientsProgramsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientsProgramsResponseMultiError) AllErrors() []error { return m }

// GetClientsProgramsResponseValidationError is the validation error returned
// by GetClientsProgramsResponse.Validate if the designated constraints aren't met.
type GetClientsProgramsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientsProgramsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientsProgramsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientsProgramsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientsProgramsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientsProgramsResponseValidationError) ErrorName() string {
	return "GetClientsProgramsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientsProgramsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientsProgramsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientsProgramsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientsProgramsResponseValidationError{}

// Validate checks the field values on GetProgramsWithTrainersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramsWithTrainersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramsWithTrainersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProgramsWithTrainersRequestMultiError, or nil if none found.
func (m *GetProgramsWithTrainersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramsWithTrainersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GetProgramsWithTrainersRequestMultiError(errors)
	}

	return nil
}

// GetProgramsWithTrainersRequestMultiError is an error wrapping multiple
// validation errors returned by GetProgramsWithTrainersRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProgramsWithTrainersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramsWithTrainersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramsWithTrainersRequestMultiError) AllErrors() []error { return m }

// GetProgramsWithTrainersRequestValidationError is the validation error
// returned by GetProgramsWithTrainersRequest.Validate if the designated
// constraints aren't met.
type GetProgramsWithTrainersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramsWithTrainersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramsWithTrainersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramsWithTrainersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramsWithTrainersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramsWithTrainersRequestValidationError) ErrorName() string {
	return "GetProgramsWithTrainersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramsWithTrainersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramsWithTrainersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramsWithTrainersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramsWithTrainersRequestValidationError{}

// Validate checks the field values on GetProgramsWithTrainersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramsWithTrainersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramsWithTrainersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProgramsWithTrainersResponseMultiError, or nil if none found.
func (m *GetProgramsWithTrainersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramsWithTrainersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTrainersPrograms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProgramsWithTrainersResponseValidationError{
						field:  fmt.Sprintf("TrainersPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProgramsWithTrainersResponseValidationError{
						field:  fmt.Sprintf("TrainersPrograms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProgramsWithTrainersResponseValidationError{
					field:  fmt.Sprintf("TrainersPrograms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProgramsWithTrainersResponseMultiError(errors)
	}

	return nil
}

// GetProgramsWithTrainersResponseMultiError is an error wrapping multiple
// validation errors returned by GetProgramsWithTrainersResponse.ValidateAll()
// if the designated constraints aren't met.
type GetProgramsWithTrainersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramsWithTrainersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramsWithTrainersResponseMultiError) AllErrors() []error { return m }

// GetProgramsWithTrainersResponseValidationError is the validation error
// returned by GetProgramsWithTrainersResponse.Validate if the designated
// constraints aren't met.
type GetProgramsWithTrainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramsWithTrainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramsWithTrainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramsWithTrainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramsWithTrainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramsWithTrainersResponseValidationError) ErrorName() string {
	return "GetProgramsWithTrainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramsWithTrainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramsWithTrainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramsWithTrainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramsWithTrainersResponseValidationError{}

// Validate checks the field values on GetClientsToAllowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientsToAllowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientsToAllowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientsToAllowRequestMultiError, or nil if none found.
func (m *GetClientsToAllowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientsToAllowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainerId

	if len(errors) > 0 {
		return GetClientsToAllowRequestMultiError(errors)
	}

	return nil
}

// GetClientsToAllowRequestMultiError is an error wrapping multiple validation
// errors returned by GetClientsToAllowRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClientsToAllowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientsToAllowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientsToAllowRequestMultiError) AllErrors() []error { return m }

// GetClientsToAllowRequestValidationError is the validation error returned by
// GetClientsToAllowRequest.Validate if the designated constraints aren't met.
type GetClientsToAllowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientsToAllowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientsToAllowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientsToAllowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientsToAllowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientsToAllowRequestValidationError) ErrorName() string {
	return "GetClientsToAllowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientsToAllowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientsToAllowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientsToAllowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientsToAllowRequestValidationError{}

// Validate checks the field values on GetTrainersToAllowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainersToAllowRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainersToAllowRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainersToAllowRequestMultiError, or nil if none found.
func (m *GetTrainersToAllowRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainersToAllowRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GetTrainersToAllowRequestMultiError(errors)
	}

	return nil
}

// GetTrainersToAllowRequestMultiError is an error wrapping multiple validation
// errors returned by GetTrainersToAllowRequest.ValidateAll() if the
// designated constraints aren't met.
type GetTrainersToAllowRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainersToAllowRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainersToAllowRequestMultiError) AllErrors() []error { return m }

// GetTrainersToAllowRequestValidationError is the validation error returned by
// GetTrainersToAllowRequest.Validate if the designated constraints aren't met.
type GetTrainersToAllowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainersToAllowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainersToAllowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainersToAllowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainersToAllowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainersToAllowRequestValidationError) ErrorName() string {
	return "GetTrainersToAllowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainersToAllowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainersToAllowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainersToAllowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainersToAllowRequestValidationError{}

// Validate checks the field values on GetClientsToAllowResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientsToAllowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientsToAllowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientsToAllowResponseMultiError, or nil if none found.
func (m *GetClientsToAllowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientsToAllowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetClientsToAllowResponseMultiError(errors)
	}

	return nil
}

// GetClientsToAllowResponseMultiError is an error wrapping multiple validation
// errors returned by GetClientsToAllowResponse.ValidateAll() if the
// designated constraints aren't met.
type GetClientsToAllowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientsToAllowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientsToAllowResponseMultiError) AllErrors() []error { return m }

// GetClientsToAllowResponseValidationError is the validation error returned by
// GetClientsToAllowResponse.Validate if the designated constraints aren't met.
type GetClientsToAllowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientsToAllowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientsToAllowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientsToAllowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientsToAllowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientsToAllowResponseValidationError) ErrorName() string {
	return "GetClientsToAllowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientsToAllowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientsToAllowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientsToAllowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientsToAllowResponseValidationError{}

// Validate checks the field values on GetTrainersToAllowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTrainersToAllowResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTrainersToAllowResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTrainersToAllowResponseMultiError, or nil if none found.
func (m *GetTrainersToAllowResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTrainersToAllowResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTrainersToAllowResponseMultiError(errors)
	}

	return nil
}

// GetTrainersToAllowResponseMultiError is an error wrapping multiple
// validation errors returned by GetTrainersToAllowResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTrainersToAllowResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTrainersToAllowResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTrainersToAllowResponseMultiError) AllErrors() []error { return m }

// GetTrainersToAllowResponseValidationError is the validation error returned
// by GetTrainersToAllowResponse.Validate if the designated constraints aren't met.
type GetTrainersToAllowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrainersToAllowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrainersToAllowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrainersToAllowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrainersToAllowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrainersToAllowResponseValidationError) ErrorName() string {
	return "GetTrainersToAllowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrainersToAllowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrainersToAllowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrainersToAllowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrainersToAllowResponseValidationError{}

// Validate checks the field values on SetProgramToClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProgramToClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProgramToClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProgramToClientRequestMultiError, or nil if none found.
func (m *SetProgramToClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProgramToClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainerId

	// no validation rules for ClientId

	// no validation rules for ProgramId

	if len(errors) > 0 {
		return SetProgramToClientRequestMultiError(errors)
	}

	return nil
}

// SetProgramToClientRequestMultiError is an error wrapping multiple validation
// errors returned by SetProgramToClientRequest.ValidateAll() if the
// designated constraints aren't met.
type SetProgramToClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProgramToClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProgramToClientRequestMultiError) AllErrors() []error { return m }

// SetProgramToClientRequestValidationError is the validation error returned by
// SetProgramToClientRequest.Validate if the designated constraints aren't met.
type SetProgramToClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProgramToClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProgramToClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProgramToClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProgramToClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProgramToClientRequestValidationError) ErrorName() string {
	return "SetProgramToClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetProgramToClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProgramToClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProgramToClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProgramToClientRequestValidationError{}

// Validate checks the field values on BlockTrainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockTrainerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockTrainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockTrainerRequestMultiError, or nil if none found.
func (m *BlockTrainerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockTrainerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainerId

	// no validation rules for ClientId

	// no validation rules for ProgramId

	if len(errors) > 0 {
		return BlockTrainerRequestMultiError(errors)
	}

	return nil
}

// BlockTrainerRequestMultiError is an error wrapping multiple validation
// errors returned by BlockTrainerRequest.ValidateAll() if the designated
// constraints aren't met.
type BlockTrainerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockTrainerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockTrainerRequestMultiError) AllErrors() []error { return m }

// BlockTrainerRequestValidationError is the validation error returned by
// BlockTrainerRequest.Validate if the designated constraints aren't met.
type BlockTrainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockTrainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockTrainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockTrainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockTrainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockTrainerRequestValidationError) ErrorName() string {
	return "BlockTrainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockTrainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockTrainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockTrainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockTrainerRequestValidationError{}

// Validate checks the field values on BlockClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BlockClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BlockClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BlockClientRequestMultiError, or nil if none found.
func (m *BlockClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BlockClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TrainerId

	// no validation rules for ClientId

	// no validation rules for ProgramId

	if len(errors) > 0 {
		return BlockClientRequestMultiError(errors)
	}

	return nil
}

// BlockClientRequestMultiError is an error wrapping multiple validation errors
// returned by BlockClientRequest.ValidateAll() if the designated constraints
// aren't met.
type BlockClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BlockClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BlockClientRequestMultiError) AllErrors() []error { return m }

// BlockClientRequestValidationError is the validation error returned by
// BlockClientRequest.Validate if the designated constraints aren't met.
type BlockClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockClientRequestValidationError) ErrorName() string {
	return "BlockClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BlockClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockClientRequestValidationError{}
